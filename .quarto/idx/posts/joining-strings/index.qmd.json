{"title":"Joining Millions of Strings in R","markdown":{"yaml":{"title":"Joining Millions of Strings in R","description":"Is there a fast way to join millions of string in R?","author":"Gennaro Calendo","date":"7/22/2023","categories":["R"],"feed":true},"headingText":"The Candidates","containsRefs":false,"markdown":"\n\nI recently had to concatenate tens of millions of strings into a single column \nof strings. I was surprised when even my `data.table` code, which was something like `dt[, Location := paste(chr, start, sep = \"-\")]`, was taking minutes. \n\nSo then, what is the fastest way to combine a bunch of strings? \n\nSince I really care about this in the context of genetic data I'll simulate \nstrings from \"Chromosomes\" and \"Start positions\" and concatenate them into a \nsingle \"Loci\". e.g. \"chr1-45678\"\n\n\nLike most things in R there are a bunch of ways to complete the same task. The\napproaches below are a few that I could think of:\n\n- `paste`: base function for concatenating strings\n- `paste0`: base function for concatenating strings (`paste(..., sep=\"\"`)\n- `sprintf`: base function for C-style `sprintf` character formatting of strings\n- `stringi::stri_c`: `stringi` function for combining multiple character vectors\n- `stringr::str_c`: `stringr` function that wraps `stringi` but conforms to \ntidyverse recycling and NA rules\n- `glue::glue`: String interpolation. Has to be converted to a vector after\ninterpolation. \n\n```{r}\nlibrary(glue)\nlibrary(stringi)\nlibrary(stringr)\nlibrary(ggplot2)\nlibrary(bench)\n```\n\n## Create some test strings\n\nLet's make 1 million \"chromosome-start\" strings to simulate a realistic test \nset size.\n\n```{r}\nset.seed(1234)\n\nN <- 1e6\nchroms <- sample(\n  paste0(\"chr\", as.character(1:22, \"X\", \"Y\")),\n  size = N, replace = TRUE\n)\nstarts <- as.character(sample.int(1e5, size = N, replace = TRUE))\n```\n\n## Time it!\n\nThe code below times the execution of each of the string joining expressions\n30 times. Since `glue` has to be converted to a character vector after \ninterpolation, I created a second expression without the coercion to see how \nmuch that affects the timing. It is for this reason that the `check` argument \nis set to FALSE.\n\n```{r}\n# Run the benchmark\nresults <- bench::mark(\n  \"paste\" = paste(chroms, starts, sep = \"-\"),\n  \"paste0\" = paste0(chroms, \"-\", starts),\n  \"sprintf\" = sprintf(\"%s%s%s\", chroms, \"-\", starts),\n  \"stri_c\" = stri_c(chroms, starts, sep = \"-\"),\n  \"str_c\" = str_c(chroms, starts, sep = \"-\"),\n  \"glue\" = as.character(glue(\"{chroms}-{starts}\")),\n  \"glue2\" = glue(\"{chroms}-{starts}\"),\n  check = FALSE,\n  memory = TRUE,\n  min_time = Inf,\n  max_iterations = 30\n)\n\n# Plot the results\nautoplot(results) +\n  labs(\n    title = \"Execution Time for Joining 1 Million Element Vectors\",\n    x = \"Time\",\n    y = \"Function\"\n  ) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(face = \"bold\", size = 16),\n    legend.position = \"bottom\"\n  )\n```\n\nIt looks like the clear winners are `stringi::stri_c` and `stringr::str_c`. \nThis makes sense. What was surprising is that `paste0` performs worse than \n`paste` with `sep=\"-\"`. \n\nThere's one, somewhat hacky, solution I wanted to test. What if we were to \ninstead write the data out as a file where the vectors are concatenated with \n\"-\" as a delimiter and then read this concatenated file back in as a single \ncolumn?\n\n## `data.table::fwrite` & `data.table::fread`\n\nAssuming more threads makes this faster(?) I'll max out all 8 cores on my \nmachine. Also, I doubt that this specific example will be faster on only \n1 million elements so I'll bump up the number of elements to 100 million\nand see how it compares against the fastest function from above.\n\n```{r}\nlibrary(data.table)\nsetDTthreads(percent = 100)\n\ndt <- data.table(\n  Chromosome = sample(paste0(\"chr\", as.character(1:22, \"X\", \"Y\")),\n    size = 1e8, replace = TRUE\n  ),\n  Start = as.character(sample.int(1e5, size = 1e8, replace = TRUE))\n)\n```\n\nWrite the data out using `fwrite(..., sep=\"-\")` to concatenate the columns\nand then read them back in as a single concatenated column with `fread`\n\n```{r}\nsystem.time({\n  fwrite(dt, file = \"test.txt\", sep = \"-\", col.names = FALSE)\n  fread(\"test.txt\", col.names = \"chr_start\")\n})\n```\n\nAnd how does this compare to concatenating with `stri_c`\n\n```{r}\nsystem.time(dt[, chr_start := stri_c(Chromosome, Start, sep=\"-\")])\n```\n\nIt looks kinda crazy but maybe if you have enough space to spare and a lot of\nthreads to throw at it then the 'hacky' solution might be a fast alternative for \nextremely large string concatenations; although the difference may not be large \nenough to to really matter too much in the end. \n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-yaml":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"output-file":"index.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.1.251","theme":"litera","title-block-banner":true,"title":"Joining Millions of Strings in R","description":"Is there a fast way to join millions of string in R?","author":"Gennaro Calendo","date":"7/22/2023","categories":["R"],"feed":true},"extensions":{"book":{"multiFile":true}}}}}